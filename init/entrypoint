#!/bin/bash

# global variables
GLOBAL_VAR="xyz"


##############################################################################
# validate if all container variables are set
##############################################################################
function validate(){
    vars=""
    for var in $vars; do
        if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
            echo "$var not set but required."
            return 1
        fi
    done
    if [[ -z ${GLOBAL_VAR+x} ]]; then
        echo "GLOBAL_VAR variable cannot be looked up."
        return 1
    fi       
}

##############################################################################
# write config vars with configfile template
##############################################################################
function writeConfigOptions(){

    echo "write config options"

}


function init(){

   echo "running init script" 

   
}

##############################################################################



function start_benchmark_container(){

    echo "moving benchmark binary to /binary volume..."
    cp -r /opt/code/{benchantdb_bench,vectordb_bench,venv} /binary
    echo "...done! binary volume is ready, exiting container now."

    # whatever blocking call 
    #tail -f /dev/null
}

function start(){
    echo "starting container..."
    start_benchmark_container
    if [[ $? != 0 ]]; then
        echo "start failed. exiting now." >&2
        exit 1
    fi
}

##############################################################################
function configure(){
    echo "configure: ..."
    ## post-start configuration via service
}

##############################################################################
function main(){
    # validate env vars
    validate
    if [[ $? != 0 ]]; then 
        echo "validation failed. exiting now." >&2
        exit 1
    fi

    # initialize
    init
    if [[ $? != 0 ]]; then 
        echo "init failed. exiting now." >&2
        exit 1
    fi

    # start
    start 
    if [[ $? != 0 ]]; then
        echo "start failed. exiting now." >&2
        exit 1
    fi    

    # configure
    configure
    if [[ $? != 0 ]]; then 
        echo "configure failed. exiting now." >&2
        exit 1
    fi

}

if [[ "$1" == "" ]]; then
    main
else
    exec "$@"
fi

